{
  "version": 3,
  "sources": ["src/Sorted.ts", "src/GridArea.ts", "src/GridLayout.ts", "src/index.ts"],
  "sourcesContent": ["export class Sorted<T> {\n    keys: number[] = [];\n    values: T[] = [];\n    get(key: number): T | undefined {\n        const idx = this.keys.indexOf(key);\n        if (idx >= 0)\n            return this.values[idx];\n    }\n    add(key: number, value: T) {\n        if (key < this.keys[0]) {\n            this.keys.unshift(key);\n            this.values.unshift(value);\n            return;\n        }\n        let i = 0;\n        for (let w = 0x1000000; w >= 1; w >>>= 1) {\n            if (this.keys[i + w] < key)\n                i += w;\n        }\n        this.keys.splice(i + 1, 0, key);\n        this.values.splice(i + 1, 0, value);\n    }\n}\n", "export interface IGridArea {\n    top: string;\n    bottom: string;\n    left: string;\n    right: string;\n}\n\nexport class GridArea implements IGridArea {\n    top: string;\n    bottom: string;\n    left: string;\n    right: string;\n\n    constructor({ top, bottom, left, right }: IGridArea) {\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n    getStyles() {\n        return {\n            'grid-area': `${this.top}/${this.left}/${this.bottom}/${this.right}`\n        };\n    }\n}\n", "import { Sorted } from \"./Sorted\";\nimport { GridArea, IGridArea } from \"./GridArea\";\n\nfunction buildGridTemplateString(list: Sorted<string>) {\n    const len = list.keys.length;\n    if (len === 0) return '';\n\n    let offset = list.keys[0];\n    let result = `[${list.values[0]}]`;\n    for (let i = 1; i < len; i++) {\n        const size = list.keys[i] - offset;\n        offset = list.keys[i];\n        result += ` ${size}fr [${list.values[i]}]`;\n    }\n    return result;\n}\n\nexport class GridLayout {\n    rows = new Sorted<string>();\n    columns = new Sorted<string>();\n    areas: GridArea[] = [];\n\n    addArea(area: IGridArea): GridArea {\n        const gridArea = new GridArea(area);\n        this.areas.push(gridArea);\n        return gridArea;\n    }\n\n    row(offset: number) {\n        let name = this.rows.get(offset);\n        if (name) return name;\n        this.rows.add(offset, name = `_${offset}`);\n        return name;\n    }\n\n    column(offset: number) {\n        let name = this.columns.get(offset);\n        if (name) return name;\n        this.columns.add(offset, name = `_${offset}`);\n        return name;\n    }\n\n    normalize(): void {\n        // area \u304B\u3089\u306E\u53C2\u7167\u306E\u306A\u3044 line \u3092\u524A\u9664\n    }\n\n    getStyles() {\n        return {\n            display: 'grid',\n            'grid-template-rows': buildGridTemplateString(this.rows),\n            'grid-template-columns': buildGridTemplateString(this.columns)\n        } as const;\n    }\n}\n", "import { GridLayout } from \"./GridLayout\";\n\nconst layout = new GridLayout();\n\nfunction createArea(top: number, bottom: number, left: number, right: number) {\n    return layout.addArea({\n        top: layout.row(top),\n        bottom: layout.row(bottom),\n        left: layout.column(left),\n        right: layout.column(right)\n    });\n}\n\nfunction main() {\n    const areas = {\n        header: createArea(0, 20, 0, 100),\n        side: createArea(20, 100, 0, 30),\n        content: createArea(20, 80, 30, 100),\n        footer: createArea(80, 100, 30, 100),\n    };\n    const app = document.getElementById('app')!;\n    for (const [key, value] of Object.entries(layout.getStyles())) {\n        app.style.setProperty(key, value);\n    }\n    for (const [className, area] of Object.entries(areas)) {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        for (const [key, value] of Object.entries(area.getStyles())) {\n            div.style.setProperty(key, value);\n        }\n        app.append(div);\n    }\n}\n\nmain();\n"],
  "mappings": "MAAA,sBACI,UAAiB,GACjB,YAAc,GACd,IAAI,GACA,KAAM,GAAM,KAAK,KAAK,QAAQ,GAC9B,GAAI,GAAO,EACP,MAAO,MAAK,OAAO,GAE3B,IAAI,EAAa,GACb,GAAI,EAAM,KAAK,KAAK,IAChB,KAAK,KAAK,QAAQ,GAClB,KAAK,OAAO,QAAQ,GACpB,OAEJ,GAAI,GAAI,EACR,OAAS,GAAI,SAAW,GAAK,EAAG,KAAO,EACnC,AAAI,KAAK,KAAK,EAAI,GAAK,GACnB,IAAK,GAEb,KAAK,KAAK,OAAO,EAAI,EAAG,EAAG,GAC3B,KAAK,OAAO,OAAO,EAAI,EAAG,EAAG,ICpBrC,QAaI,YAAY,CAAE,MAAK,SAAQ,OAAM,UAC7B,KAAK,IAAM,EACX,KAAK,OAAS,EACd,KAAK,KAAO,EACZ,KAAK,MAAQ,EAEjB,YACI,MAAO,CACH,YAAa,GAAG,KAAK,OAAO,KAAK,QAAQ,KAAK,UAAU,KAAK,UClBzE,WAAiC,GAC7B,KAAM,GAAM,EAAK,KAAK,OACtB,GAAI,IAAQ,EAAG,MAAO,GAEtB,GAAI,GAAS,EAAK,KAAK,GACnB,EAAS,IAAI,EAAK,OAAO,MAC7B,OAAS,GAAI,EAAG,EAAI,EAAK,KACrB,KAAM,GAAO,EAAK,KAAK,GAAK,EAC5B,EAAS,EAAK,KAAK,GACnB,GAAU,IAAI,QAAW,EAAK,OAAO,MAEzC,MAAO,GAdX,sBAkBI,UAAO,GAAI,GACX,aAAU,GAAI,GACd,WAAoB,GAEpB,QAAQ,GACJ,KAAM,GAAW,GAAI,GAAS,GAC9B,YAAK,MAAM,KAAK,GACT,EAGX,IAAI,GACA,GAAI,GAAO,KAAK,KAAK,IAAI,GACzB,MAAI,IACJ,MAAK,KAAK,IAAI,EAAQ,EAAO,IAAI,KAC1B,GAGX,OAAO,GACH,GAAI,GAAO,KAAK,QAAQ,IAAI,GAC5B,MAAI,IACJ,MAAK,QAAQ,IAAI,EAAQ,EAAO,IAAI,KAC7B,GAGX,aAIA,YACI,MAAO,CACH,QAAS,OACT,qBAAsB,EAAwB,KAAK,MACnD,wBAAyB,EAAwB,KAAK,WChDlE,KAAM,GAAS,GAAI,GAEnB,WAAoB,EAAa,EAAgB,EAAc,GAC3D,MAAO,GAAO,QAAQ,CAClB,IAAK,EAAO,IAAI,GAChB,OAAQ,EAAO,IAAI,GACnB,KAAM,EAAO,OAAO,GACpB,MAAO,EAAO,OAAO,KAI7B,aACI,KAAM,GAAQ,CACV,OAAQ,EAAW,EAAG,GAAI,EAAG,KAC7B,KAAM,EAAW,GAAI,IAAK,EAAG,IAC7B,QAAS,EAAW,GAAI,GAAI,GAAI,KAChC,OAAQ,EAAW,GAAI,IAAK,GAAI,MAE9B,EAAM,SAAS,eAAe,OACpC,SAAW,CAAC,EAAK,IAAU,QAAO,QAAQ,EAAO,aAC7C,EAAI,MAAM,YAAY,EAAK,GAE/B,SAAW,CAAC,EAAW,IAAS,QAAO,QAAQ,IAC3C,KAAM,GAAM,SAAS,cAAc,OACnC,EAAI,UAAU,IAAI,GAClB,SAAW,CAAC,EAAK,IAAU,QAAO,QAAQ,EAAK,aAC3C,EAAI,MAAM,YAAY,EAAK,GAE/B,EAAI,OAAO,IAInB",
  "names": []
}
